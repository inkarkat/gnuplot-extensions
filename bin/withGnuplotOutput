#!/bin/bash

: ${WITHGNUPLOTOUTPUT_COMMAND_JOINER=;}
: ${WITHGNUPLOTOUTPUT_EXEC_END=;}
# WITHGNUPLOTOUTPUT_{OUTPUTTYPE}_GRAPH_SIZE
# WITHGNUPLOTOUTPUT_GRAPH_SIZE
: ${WITHGNUPLOTOUTPUT_GRAPH_NOGUI:=dumb ansi}
: ${WITHGNUPLOTOUTPUT_GRAPH_GUI:=qt}

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && absoluteScriptFile="$(readlink -nf -- "${BASH_SOURCE[0]}")" && dirname -- "$absoluteScriptFile" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly libDir="${projectDir}/lib/$(basename -- "${BASH_SOURCE[0]}")"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [DEBUG=withGnuplotOutput[!]] %q %s\n' "$(basename "$1")" "\"\"|FILE.(png,svg)|dumb|term|gui|fullscreen [-o|--open] [-v|--verbose] [-f|--fullscreen|-s|--size WIDTHxHEIGHT|WIDTH,HEIGHT] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND [...] ${WITHGNUPLOTOUTPUT_EXEC_END} [--exec ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND (either gnuplot itself or an executable invoking gnuplot) while
every gnuplot invocation is modified to output to FILE / as characters / with
the GUI viewer instead of the default Gnuplot terminal.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --open|-o		Open the output FILE after successful graphing.
    --verbose|-v	Print the (full absolute) filespec of the output FILE
			(only when successful and graphing into a file).
    fullscreen|--fullscreen|-f
			Use the (primary) display's resolution as the size.
    --size|-s WIDTHxHEIGHT|WIDTH,HEIGHT
			Set the output terminal size to WIDTHxHEIGHT pixels
			(characters for dumb|term).
			You can preset the default size via
			\$WITHGNUPLOTOUTPUT_{OUTPUTTYPE}_GRAPH_SIZE or (as a
			generic fallback) \$WITHGNUPLOTOUTPUT_GRAPH_SIZE
    --command|-c CMD	Execute CMD as a command-line.
    --exec CMD [...] ${WITHGNUPLOTOUTPUT_EXEC_END}	Execute CMD; all following arguments are taken to be
			arguments to the CMD until an argument consisting of
			'${WITHGNUPLOTOUTPUT_EXEC_END}' is encountered.
HELPTEXT
}

case "$1" in
    --help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
    fullscreen)		shift; set -- gui --fullscreen "$@";;
    '')			if [ $# -eq 0 ]; then
			    echo 'ERROR: Missing output.'
			    echo
			    printUsage "$0"
			    exit 2
			fi >&2
			;;
esac
output="${1?}"; shift

isOpen=
isVerbose=
size=
commands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--open|-o)	shift; isOpen=t;;
	--verbose|-v)	shift; isVerbose=t;;
	--size|-s)	shift; size="${1:?}"; shift;;
	--fullscreen|-f)
			shift; size="$(DISPLAYRESOLUTION_SEPARATOR=',' displayresolution --primary)";;

	--command|-c)	shift; commands+="${commands:+ $WITHGNUPLOTOUTPUT_COMMAND_JOINER }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$WITHGNUPLOTOUTPUT_EXEC_END" ]
			do
			    printf -v quotedArg %q "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${WITHGNUPLOTOUTPUT_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $WITHGNUPLOTOUTPUT_COMMAND_JOINER }${cmd}"
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $WITHGNUPLOTOUTPUT_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
if [ -z "$commands" ]; then
    echo "ERROR: No COMMAND(s) specified; need to pass -c|--command \"COMMANDLINE\", or --exec SIMPLECOMMAND [...] $WITHGNUPLOTOUTPUT_EXEC_END or SIMPLECOMMAND."
    echo
    printUsage "$0"
    exit 2
fi >&2

if [ -z "$output" ]; then
    [ -n "$DISPLAY" ] \
	&& output='gui' \
	|| output='dumb'
fi
outputExtension="${output##*.}"

: ${WITHGNUPLOTOUTPUT_DUMB_GRAPH_SIZE:=${COLUMNS:-80},$((${LINES:-25} - 3))}	# Default terminal size to actual dimensions minus a few lines for the prompt.
outputDependentSizeVarName="WITHGNUPLOTOUTPUT_${outputExtension^^}_GRAPH_SIZE"
outputDependentSize="${!outputDependentSizeVarName}"
size="${size:-${outputDependentSize:-$WITHGNUPLOTOUTPUT_GRAPH_SIZE}}"
size="${size/x/,}"

setOutputFile()
{
    if [ "$isOpen" ]; then
	WITHGNUPLOTOUTPUT_OPENFILE="$output"
    fi
    if [ "$isVerbose" ]; then
	WITHGNUPLOTOUTPUT_OUTPUTFILE="$(realpath --no-symlinks -- "$output")" || WITHGNUPLOTOUTPUT_OUTPUTFILE="$output"
    fi
}

case "$outputExtension" in
    png)	terminalSettings="png${size:+ size }${size}; set output '$output'"; setOutputFile;;
    svg)	terminalSettings="svg${size:+ size }${size} background 'white'; set output '$output'"; setOutputFile;;
    dumb|term)	terminalSettings="${WITHGNUPLOTOUTPUT_GRAPH_NOGUI}${size:+ size }${size}";;
    gui)	terminalSettings="${WITHGNUPLOTOUTPUT_GRAPH_GUI}${size:+ size }${size}";;
    *)		printf >&2 "ERROR: Unsupported output format '%s'.\\n" "$outputExtension"; exit 2;;
esac

# Handle recursive invocation where our gnuplot wrapper is already in the PATH.
PATH="${PATH/#"$libDir":/}"
PATH="${PATH//:"$libDir":/:}"
WITHGNUPLOTOUTPUT_GNUPLOT_COMMAND="$(which gnuplot)" || exit 3

export WITHGNUPLOTOUTPUT_TERMINAL_SETTINGS="set terminal ${terminalSettings:?}" \
    WITHGNUPLOTOUTPUT_GNUPLOT_COMMAND \
    WITHGNUPLOTOUTPUT_OPENFILE \
    WITHGNUPLOTOUTPUT_OUTPUTFILE \
    PATH="${libDir}:${PATH}"

eval "$commands"
